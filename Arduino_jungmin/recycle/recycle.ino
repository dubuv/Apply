#include <SoftwareSerial.h>
#include <talkie.h>

Talkie voice;

const uint8_t sp1[] PROGMEM = {0x00, 0x08, 0xd8, 0xa9, 0x3c, 0x00, 0x2b, 0xb5, 0x27, 0x60, 0x58, 0xd7, 0xc3, 0x23, 0x13, 0xea, 0x66, 0x4e, 0x8e, 0x04, 0x7c, 0x99, 0x85, 0xd9, 0x59, 0x2a, 0x88, 0xa7, 0x12, 0x22, 0xb6, 0x69, 0xa0, 0x9e, 0x88, 0xb3, 0xb4, 0xa0, 0x81, 0xf6, 0xe2, 0x0d, 0xca, 0x82, 0x0a, 0xe2, 0x87, 0x2c, 0x2a, 0x76, 0x0a, 0xa8, 0x5f, 0x58, 0xa2, 0xd4, 0x29, 0xa0, 0x7f, 0x79, 0x98, 0x94, 0xc3, 0x21, 0x71, 0xee, 0x65, 0xf2, 0x0e, 0x83, 0xc2, 0x89, 0xa7, 0x3a, 0x3b, 0x0c, 0x4e, 0xcb, 0x96, 0xea, 0x6c, 0xb1, 0xa0, 0xac, 0x78, 0xa9, 0x3b, 0xc1, 0x83, 0xd7, 0x12, 0x2a, 0x52, 0x0a, 0x0d, 0xec, 0x88, 0x8d, 0xa7, 0x5b, 0x0c, 0xb0, 0x4d, 0x36, 0x91, 0x7e, 0xf1, 0xc0, 0x14, 0xfb, 0x44, 0xf2, 0x22, 0x81, 0x7c, 0xe6, 0x9d, 0x51, 0x8d, 0x02, 0xf6, 0x27, 0x99, 0x84, 0x36, 0x1a, 0xb8, 0x1f, 0x68, 0x1c, 0xc6, 0x19, 0x60, 0x7f, 0x70, 0x9a, 0xa8, 0x66, 0x03, 0x75, 0xe9, 0x9d, 0x71, 0x86, 0x03, 0xd8, 0x94, 0x57, 0xd4, 0x49, 0x2e, 0x60, 0x93, 0xee, 0xd5, 0xd4, 0x38, 0x00, 0x77, 0x46, 0x46, 0x9c, 0x61, 0x72, 0xb2, 0x21, 0xe1, 0x71, 0x8f, 0x4b, 0xed, 0x0b, 0x57, 0xda, 0x3d, 0x2e, 0x8b, 0x2b, 0x92, 0x29, 0x75, 0xb9, 0x2c, 0x8d, 0x51, 0xb4, 0xd8, 0xe5, 0xb0, 0x30, 0x8e, 0x95, 0x54, 0x97, 0xcd, 0xd4, 0x24, 0x44, 0x48, 0x69, 0x16, 0xd6, 0xed, 0x90, 0x49, 0x25, 0x18, 0xc4, 0x95, 0x50, 0x9a, 0x65, 0xa4, 0xeb, 0xd8, 0xaa, 0xee, 0x22, 0x01, 0x00, 0x00, 0xe0, 0xff};

SoftwareSerial BTSerial(6, 7);
// PIR 센서 핀
int pir = 2; 
int led = 13;  
int pirState = LOW;  // PIR 상태 저장 변수
int val = 0;  // PIR 센서에서 읽어온 값
bool sensorActive = false;  // 센서 활성화 상태 플래그

void setup() {
  // 시리얼 통신 (블루투스) 시작
  Serial.begin(9600);
  BTSerial.begin(9600);  

  pinMode(pir, INPUT);  // PIR 센서 핀을 입력 모드로 설정
  pinMode(led, OUTPUT);
  Serial.println("PIR 센서 시스템 준비됨. 명령을 기다리는 중...");

  delay(2000);
}

void loop() {
  // 블루투스를 통해 명령을 받음
  if (BTSerial.available() > 0) {
    char btData = BTSerial.read();
    
    // '1'을 받으면 센서를 활성화
    if (btData == '1') {
      sensorActive = true;
      Serial.println("PIR 센서 활성화됨");
      BTSerial.println("PIR 센서 활성화됨");
    }
    
    // '0'을 받으면 센서를 비활성화
    if (btData == '0') {
      sensorActive = false;
      digitalWrite(led, LOW);
      Serial.println("PIR 센서 비활성화됨");
      BTSerial.println("PIR 센서 비활성화됨");
    }
  }
  
  // 센서가 활성화된 경우에만 PIR 센서 값을 확인
  if (sensorActive) {
    val = digitalRead(pir); 
 
    
    if (val == HIGH) {  // 움직임이 감지된 경우
      if (pirState == LOW) {
        digitalWrite(led, HIGH);
        BTSerial.println("1");
        Serial.println("1");  // 블루투스를 통해 알림 전송
        pirState = HIGH;
        voice.say(sp1);   
      }
      delay(500);
    } else {
      if (pirState == HIGH) {
        digitalWrite(led, LOW);
        BTSerial.println("재활용 실패!");
        Serial.println("재활용 실패!");  // 움직임이 없을 때 알림 전송
        pirState = LOW;
      }
    }
  }
  
}